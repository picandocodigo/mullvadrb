module Mullvad
  # Main module in charge of connection
  module Manager
    # Default path, copy the files here from /etc/wireguard (in general)
    PATH = '/etc/wireguard'
    FILES = `sudo find /etc/wireguard/ -name *.conf`.split
    CONFIG = 'mullvad.dump'
    COUNTRIES = [
      { value: 'al', name: 'Albania ğŸ‡¦ğŸ‡±' },
      { value: 'au', name: 'Australia ğŸ‡¦ğŸ‡º' },
      { value: 'at', name: 'Austria ğŸ‡¦ğŸ‡¹' },
      { value: 'be', name: 'Belgium ğŸ‡§ğŸ‡ª' },
      { value: 'br', name: 'Brazil ğŸ‡§ğŸ‡·' },
      { value: 'bg', name: 'Bulgaria ğŸ‡§ğŸ‡¬' },
      { value: 'ca', name: 'Canada ğŸ‡¨ğŸ‡¦' },
      { value: 'co', name: 'Colombia ğŸ‡¨ğŸ‡´' },
      { value: 'hr', name: 'Croatia ğŸ‡­ğŸ‡·' },
      { value: 'cz', name: 'Czech Republic ğŸ‡¨ğŸ‡¿' },
      { value: 'dk', name: 'Denmark ğŸ‡©ğŸ‡°' },
      { value: 'ee', name: 'Estonia ğŸ‡ªğŸ‡ª' },
      { value: 'fi', name: 'Finland ğŸ‡«ğŸ‡®' },
      { value: 'fr', name: 'France ğŸ‡«ğŸ‡·' },
      { value: 'de', name: 'Germany ğŸ‡©ğŸ‡ª' },
      { value: 'gr', name: 'Greece ğŸ‡¬ğŸ‡·' },
      { value: 'hk', name: 'Hong Kong ğŸ‡­ğŸ‡°' },
      { value: 'hu', name: 'Hungary ğŸ‡­ğŸ‡º' },
      { value: 'ie', name: 'Ireland ğŸ‡®ğŸ‡ª' },
      { value: 'it', name: 'Italy ğŸ‡®ğŸ‡¹' },
      { value: 'jp', name: 'Japan ğŸ‡¯ğŸ‡µ' },
      { value: 'nl', name: 'Netherlands ğŸ‡³ğŸ‡±' },
      { value: 'nz', name: 'New Zealand ğŸ‡³ğŸ‡¿' },
      { value: 'no', name: 'Norway ğŸ‡³ğŸ‡´' },
      { value: 'pl', name: 'Poland ğŸ‡µğŸ‡±' },
      { value: 'pt', name: 'Portugal ğŸ‡µğŸ‡¹' },
      { value: 'ro', name: 'Romania ğŸ‡·ğŸ‡´' },
      { value: 'rs', name: 'Serbia ğŸ‡·ğŸ‡¸' },
      { value: 'sg', name: 'Singapore ğŸ‡¸ğŸ‡¬' },
      { value: 'sk', name: 'Slovakia ğŸ‡¸ğŸ‡°' },
      { value: 'za', name: 'South Africa ğŸ‡¿ğŸ‡¦' },
      { value: 'es', name: 'Spain ğŸ‡ªğŸ‡¸' },
      { value: 'se', name: 'Sweden ğŸ‡¸ğŸ‡ª' },
      { value: 'ch', name: 'Switzerland ğŸ‡¨ğŸ‡­' },
      { value: 'gb', name: 'United Kingdom ğŸ‡¬ğŸ‡§' },
      { value: 'ua', name: 'Ukraine ğŸ‡ºğŸ‡¦' },
      { value: 'us', name: 'USA ğŸ‡ºğŸ‡¸' }
    ].freeze

    class << self
      # Select a random VPN connection
      def random
        FILES.sample
      end

      # Choose by country
      def country
        country = TTY::Prompt.new.select('Select country', COUNTRIES, cycle: true, per_page: 20, filter: true)
        FILES.select { |a| a.split('/').last.start_with?(country) }.sample
      end

      # Select a specific connection
      def specific
        countries = FILES.map do |c|
          {
            name: c.split('/').last,
            value: c
          }
        end
        TTY::Prompt.new.select('Select configuration file', countries, cycle: true, per_page: 20)
      end

      # Check status
      def status
        status = `curl -s https://am.i.mullvad.net/connected`
        regexp = /\(server ([a-z]{2})[a-z\-0-9]+\)/
        # Add country name to the server if we are connected
        if (match = status.match(regexp))
          country = COUNTRIES.find { |c| c[:value] == match[1] }[:name]
          status = status.gsub(regexp, "in #{country} \\0")
        end
        status
      end

      def connected?
        status.match?('You are connected')
      end

      def load_connection
        Marshal.load(File.read(CONFIG))
      end

      def save_connection
        File.open(CONFIG, 'wb') do |f|
          f.write(Marshal.dump(@connection))
        end
      end

      def connect(selection)
        connection_file = Mullvad::Manager.send(selection).split('/').last
        if connected?
          @connection = load_connection
          puts "Disconnecting from #{@connection.file}"
          @connection.disconnect
        end
        file = "#{PATH}/#{connection_file}"
        @connection = Mullvad::Connection.new(file)
        @connection.connect
        save_connection
      end

      def disconnect
        @connection = load_connection
        if @connection
          @connection.disconnect
        else
          puts 'No active connection available'
        end
      end
    end
  end
end
